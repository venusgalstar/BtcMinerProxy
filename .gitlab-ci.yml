variables: # keep this list alphabetically sorted
  CI_AWS_TASK: "proxy-router"
  ENVIRONMENT: "production"
  NODE_DEF: "prt"
  WEB_ADDRESS: "0.0.0.0:8080"

stages:
  - test
  - deploy
  - e2e-test
  - release

e2e-test:
  stage: e2e-test
  allow_failure: true
  trigger:
    project: proxy/router-test
    branch: $CI_COMMIT_BRANCH
    strategy: depend

lint:
  inherit:
    default: false
  image: golangci/golangci-lint:v1.50.1-alpine
  stage: test
  only:
    - branches
    - tags
    - merge_requests
  script:
    - golangci-lint run -v

test:
  inherit:
    default: false
  image: golang:1.19.3-alpine
  stage: test
  only:
    - branches
    - tags
    - merge_requests
  script:
    - apk add --no-cache git make musl-dev gcc
    - go version
    - go mod download
    - go test -v -p 1 $(go list ./... | grep -v /test) # skips the test folder for now

.ecr_login_script: &ecr_login_script |
  echo "**************************"
  echo "*** ECR Login to Shared Titanio-NET Repo in USE-1"
  echo "**************************"
  docker system prune -af
  aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $CI_AWS_TitanIO_NET_ECR

.create_image_tag: &create_image_tag |
  echo "**************************"
  echo "*** Tag Image "
  echo "**************************"
  IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)-$TGT_ENV-$NODE_DEF" 
  echo $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG

.build_image_script: &build_image_script |
  echo "**************************"
  echo "*** Build Image "
  echo "**************************"
  docker build \
    -t $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG --no-cache . \
    --build-arg ETH_NODE_ADDRESS=$ETH_NODE_ADDRESS \
    --build-arg ETH_NODE_LEGACY_TX=$ETH_NODE_LEGACY_TX \
    --build-arg ENVIRONMENT=$ENVIRONMENT \
    --build-arg HASHRATE_CYCLE_DURATION=$HASHRATE_CYCLE_DURATION \
    --build-arg HASHRATE_VALIDATION_START_TIMEOUT=$HASHRATE_VALIDATION_START_TIMEOUT \
    --build-arg HASHRATE_SHARE_TIMEOUT=$HASHRATE_SHARE_TIMEOUT \
    --build-arg HASHRATE_ERROR_THRESHOLD=$HASHRATE_ERROR_THRESHOLD \
    --build-arg HASHRATE_ERROR_TIMEOUT=$HASHRATE_ERROR_TIMEOUT \
    --build-arg CLONE_FACTORY_ADDRESS=$CLONE_FACTORY_ADDRESS \
    --build-arg CONTRACT_MNEMONIC=$CONTRACT_MNEMONIC \
    --build-arg WALLET_PRIVATE_KEY=$WALLET_PRIVATE_KEY \
    --build-arg MINER_VETTING_DURATION=$MINER_VETTING_DURATION \
    --build-arg MINER_SHARE_TIMEOUT=$MINER_SHARE_TIMEOUT \
    --build-arg LOG_TO_FILE=$LOG_TO_FILE \
    --build-arg LOG_COLOR=$LOG_COLOR \
    --build-arg LOG_LEVEL_APP=$LOG_LEVEL_APP \
    --build-arg LOG_LEVEL_CONNECTION=$LOG_LEVEL_CONNECTION \
    --build-arg LOG_LEVEL_PROXY=$LOG_LEVEL_PROXY \
    --build-arg LOG_LEVEL_SCHEDULER=$LOG_LEVEL_SCHEDULER \
    --build-arg POOL_ADDRESS=$POOL_ADDRESS \
    --build-arg POOL_CONN_TIMEOUT=$POOL_CONN_TIMEOUT \
    --build-arg PROXY_ADDRESS=$PROXY_ADDRESS \
    --build-arg SYS_ENABLE=$SYS_ENABLE \
    --build-arg SYS_LOCAL_PORT_RANGE=$SYS_LOCAL_PORT_RANGE \
    --build-arg SYS_NET_DEV_MAX_BACKLOG=$SYS_NET_DEV_MAX_BACKLOG \
    --build-arg SYS_RLIMIT_HARD=$SYS_RLIMIT_HARD \
    --build-arg SYS_RLIMIT_SOFT=$SYS_RLIMIT_SOFT \
    --build-arg SYS_SOMAXCONN=$SYS_SOMAXCONN \
    --build-arg SYS_TCP_MAX_SYN_BACKLOG=$SYS_TCP_MAX_SYN_BACKLOG \
    --build-arg WEB_ADDRESS=$WEB_ADDRESS \
    --build-arg WEB_PUBLIC_URL=$WEB_PUBLIC_URL
  echo "**************************"
  echo "*** Push Image"
  echo "**************************"
  docker push $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG

.update_task_definition: &update_task_definition |
  echo "**************************"
  echo "*** Update Task Definition"
  echo "**************************"
  aws ecs describe-task-definition --region $AWS_DEFAULT_REGION --task-definition tsk-$CI_AWS_TASK > input.json
  echo "**************************"
  echo "*** Old Task Definition"
  echo "**************************"
  cat input.json | jq .
  echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image='\"$CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG\") > input.json 
  echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].ulimits=[{"name":"nofile","softLimit":15000,"hardLimit":15000}]') > input.json
  echo $(cat input.json | jq '.taskDefinition') > input.json  
  echo $(cat input.json | jq  'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities)' | jq 'del(.registeredBy)' | jq 'del(.registeredAt)') > input.json
  sed -i 's/'$CI_AWS_ACCOUNT_SBX'/'$TGT_ACCOUNT'/g' input.json  
  echo "**************************"
  echo "*** New Task Definition"
  echo "**************************"
  cat input.json | jq .

.deploy_new_task_definition: &deploy_new_task_definition |
  aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json file://input.json
  REVISION=$(aws ecs describe-task-definition --task-definition tsk-$CI_AWS_TASK --region $AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
  echo "****************************************************"
  echo "****************************************************"
  echo "*** Update Task: "
  echo "*** - AWS Account: Titanio-$TGT_ENV"
  echo "*** - Cluster:    ecs-$CI_AWS_ECR_REPO-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION"
  echo "*** - Service:    svc-$CI_AWS_TASK-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION"
  echo "*** - Task:       tsk-$CI_AWS_TASK:$REVISION"
  echo "*** - Image:      $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG"
  echo "****************************************************"
  echo "****************************************************"
  aws ecs update-service --region $AWS_DEFAULT_REGION --cluster ecs-$CI_AWS_ECR_REPO-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION --service svc-$CI_AWS_TASK-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION --task-definition tsk-$CI_AWS_TASK:$REVISION

.deploy_seller: &deploy_seller
  - *ecr_login_script
  - *create_image_tag
  - *build_image_script
  - *update_task_definition
  - *deploy_new_task_definition

.deploy_buyer: &deploy_buyer
  - POOL_ADDRESS=$BUYER_POOL_ADDRESS
  - WALLET_PRIVATE_KEY=$BUYER_PRIVATEKEY
  - NODE_DEF="buy"
  - CI_AWS_TASK="proxy-buyer"
  - *ecr_login_script
  - *create_image_tag
  - *build_image_script
  - *update_task_definition
  - *deploy_new_task_definition

default:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest

bedrock-02-DEV-seller:
  stage: deploy
  environment: dev
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - devops
    - bedrock
    - shell
    - titanio-dev
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_DEV
    TGT_ENV: dev
  script:
    - *deploy_seller
    - echo "$TGT_ENV seller updated"

# bedrock-02-DEV-buyer:
#   stage: deploy
#   environment: dev
#   rules:
#     - if: $CI_COMMIT_BRANCH == "dev"
#       when: always
#     - if: $CI_COMMIT_BRANCH != "dev"
#       when: manual
#     - if: $CI_MERGE_REQUEST_ID
#       when: never
#   tags:
#     - devops
#     - bedrock
#     - shell
#     - titanio-dev
#   variables:
#     TGT_ACCOUNT: $CI_AWS_ACCOUNT_DEV
#     TGT_ENV: dev
#   script:
#     - *deploy_buyer
#     - echo "$TGT_ENV buyer updated"

bedrock-03-STG-seller:
  stage: deploy
  environment: stg
  rules:
    - if: $CI_COMMIT_BRANCH == "stg"
      when: always
    - if: $CI_COMMIT_BRANCH != "stg"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - devops
    - bedrock
    - shell
    - titanio-stg
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_STG
    TGT_ENV: stg
  script:
    - *deploy_seller
    - echo "$TGT_ENV seller updated"

# bedrock-03-STG-buyer:
#   stage: deploy
#   environment: stg
#   rules:
#     - if: $CI_COMMIT_BRANCH == "stg"
#       when: always
#     - if: $CI_COMMIT_BRANCH != "stg"
#       when: manual
#     - if: $CI_MERGE_REQUEST_ID
#       when: never
#   # only:
#   #   - stg
#   tags:
#     - devops
#     - bedrock
#     - shell
#     - titanio-stg
#   variables:
#     TGT_ACCOUNT: $CI_AWS_ACCOUNT_STG
#     TGT_ENV: stg
#   script:
#     - *deploy_buyer
#     - echo "$TGT_ENV buyer updated"

bedrock-04-PRD-seller:
  stage: deploy
  environment: lmn
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - devops
    - bedrock
    - shell
    - titanio-lmn
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_LMN
    TGT_ENV: lmn
    PROXY_LOG_STRATUM: "false"
  script:
    - *deploy_seller
    - echo "$TGT_ENV seller updated"

# bedrock-04-PRD-buyer:
#   stage: deploy
#   environment: lmn
#   rules:
#     - if: $CI_COMMIT_BRANCH
#       when: manual
#     - if: $CI_MERGE_REQUEST_ID
#       when: never
#   # only:
#   #   - main
#   tags:
#     - devops
#     - bedrock
#     - shell
#     - titanio-lmn
#   variables:
#     TGT_ACCOUNT: $CI_AWS_ACCOUNT_LMN
#     TGT_ENV: lmn
#     PROXY_LOG_STRATUM: "false"
#   script:
#     - *deploy_buyer
#     - echo "$TGT_ENV buyer updated"

.default-release: &default-release
  inherit:
    default: false
  stage: release
  needs: ["test", "lint"]
  image:
    name: goreleaser/goreleaser:v1.19.2
    entrypoint: [""]

.default-tag: &default-tag
  stage: release
  needs: ["test", "lint"]
  image: node:alpine
  before_script:
    - export $(grep -v '^#' .version | xargs)
    - apk --no-cache add git
    - PROJECT_URL=$(echo $CI_PROJECT_URL | sed 's/https:\/\///')
    - git remote set-url origin https://oauth2:$CI_TAG_PUSH_TOKEN@$PROJECT_URL

create_tag:
  <<: *default-tag
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: manual
    - if: $CI_COMMIT_BRANCH == "stg"
      when: on_success
  script:
    - git fetch origin -f --prune --prune-tags
    - git tag "$VERSION-$CI_COMMIT_BRANCH"
    - git push origin --tags

create_tag_main:
  <<: *default-tag
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
  script:
    - git fetch origin -f --prune --prune-tags
    - git tag "$VERSION-lmn"
    - git push origin --tags

release-internal:
  <<: *default-release
  variables:
    GIT_DEPTH: 0
    GITLAB_TOKEN: $CI_TAG_PUSH_TOKEN
    GORELEASER_FORCE_TOKEN: gitlab
  only:
    - /.*-dev$/
    - /.*-stg$/
  script:
    - goreleaser release --clean -f "./.goreleaser-internal.yaml"
  artifacts:
    paths:
      - dist/proxy-router_*

release-external:
  <<: *default-release
  variables:
    GIT_DEPTH: 0
    GORELEASER_FORCE_TOKEN: github
  only:
    - /.*-lmn$/
  script:
    - goreleaser release --clean
